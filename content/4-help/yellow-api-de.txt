---
Title: Yellow-Programmierung (API)
Sidebar: sidebar-de
Language: de
---
Yellow hat eine API für Entwickler. Wir :heart: Entwickler.

[toc]

## Objekte

Die folgenden Objekte sind vorhanden:

[$yellow->page](#yellow-page) gibt Zugang zur aktuellen Seite  
[$yellow->pages](#yellow-pages) gibt Zugang zu Seiten vom Dateisystem  
[$yellow->files](#yellow-files) gibt Zugang zu Dateien vom Dateisystem  
[$yellow->plugins](#yellow-plugins) gibt Zugang zu Plugins  
[$yellow->themes](#yellow-themes) gibt Zugang zu Themes  
[$yellow->config](#yellow-config) gibt Zugang zu Einstellungen  
[$yellow->text](#yellow-text) gibt Zugang zu Textstrings  
[$yellow->toolbox](#yellow-toolbox) gibt Zugang zu einer Werkzeugkiste mit Helfern  

### Yellow-Page

Yellow-Page gibt Zugang zur aktuellen Seite:

**$yellow->page->get($key)**  
Hole die [Metadaten](markdown-cheat-sheet-de#einstellungen) der Seite

**$yellow->page->getHtml($key)**  
Hole die [Metadaten](markdown-cheat-sheet-de#einstellungen) der Seite, HTML-kodiert  

**$yellow->page->getDate($key, $dateFormat = "")**  
Hole die [Metadaten](markdown-cheat-sheet-de#einstellungen) der Seite im [sprachspezifischem Format](#formate)

**$yellow->page->getDateHtml($key, $dateFormat = "")**  
Hole die [Metadaten](markdown-cheat-sheet-de#einstellungen) der Seite im [sprachspezifischem Format](#formate), HTML-kodiert

**$yellow->page->getContent($rawFormat = false, $sizeMax = 0)**  
Hole den Seitenhalt, HTML-kodiert oder Rohformat

**$yellow->page->getParent()**  
Hole die Elternseite der aktuellen Seite, null falls nicht vorhanden

**$yellow->page->getParentTop($homeFailback = true)**  
Hole die Hauptseite der aktuellen Seite, null falls nicht vorhanden

**$yellow->page->getSiblings($showInvisible = false)**  
Hole eine [Page-Collection](#yellow-page-collection) mit Seiten auf dem selben Level wie die aktuelle Seite 

**$yellow->page->getChildren($showInvisible = false)**  
Hole eine [Page-Collection](#yellow-page-collection) mit Kinderseiten der aktuellen Seite 

**$yellow->page->getFiles($showInvisible = false)**  
Hole eine [Page-Collection](#yellow-page-collection) mit Mediendateien der aktuellen Seite

**$yellow->page->getPages()**  
Hole eine [Page-Collection](#yellow-page-collection) mit zusätzlichen Seiten für die aktuellen Seite

**$yellow->page->getPage($key)**  
Hole eine zugehörige Seite

**$yellow->page->getLocation($absoluteLocation = false)**  
Hole die Adresse der Seite

**$yellow->page->getUrl()**  
Hole die URL der Seite mit Serverscheme und Servername 

**$yellow->page->getExtra($name)**  
Hole extra HTML-Daten der Seite

**$yellow->page->getHeader($key)**  
Hole einen Responseheader der Seite

**$yellow->page->getModified($httpFormat = false)**  
Hole das Änderungsdatum der Seite, Unix-Zeit oder HTTP-Format

**$yellow->page->getLastModified($httpFormat = false)**  
Hole das letzte Änderungsdatum der Seite, Unix-Zeit oder HTTP-Format

**$yellow->page->getStatusCode($httpFormat = false)**  
Hole den Statuscode der Seite, Zahl oder HTTP-Format

**$yellow->page->error($statusCode, $pageError = "")**  
Antworte mit Fehlerseite

**$yellow->page->clean($statusCode, location = "")**  
Antworte mit Statuscode, ohne Seiteninhalt

**$yellow->page->isAvailable()**  
Teste ob die Seite vorhanden ist

**$yellow->page->isVisible()**  
Teste ob die Seite sichtbar ist

**$yellow->page->isActive()**  
Teste ob die Seite innerhalb der aktuellen Anfrage ist

**$yellow->page->isCacheable()**  
Teste ob die Seite cachebar ist

**$yellow->page->isError()**  
Teste ob die Seite einen Fehler hat

**$yellow->page->isHeader($key)**  
Teste ob der Responseheader existiert

**$yellow->page->isExisting($key)**  
Teste ob die [Metadaten](markdown-cheat-sheet-de#einstellungen) der Seite existiert  

**$yellow->page->isPage($key)**  
Teste ob die zugehörige Seite existiert

Hier ist ein Beispiel-Snippet um den Seiteninhalt anzuzeigen:

``` php
<div class="content main">
<h1><?php echo $yellow->page->getHtml("titleContent") ?></h1>
<?php echo $yellow->page->getContent() ?>
</div>
```

Hier ist ein Beispiel-Snippet um den Seiteninhalt und zusätzliche Metadaten anzuzeigen:

``` php
<div class="content main">
<h1><?php echo $yellow->page->getHtml("titleContent") ?></h1>
<?php echo $yellow->page->getContent() ?>
<p>
<?php echo $yellow->page->getHtml("author") ?>,
<?php echo $yellow->page->getDateHtml("modified") ?>
</p>
</div>
```

### Yellow-Page-Collection

Yellow-Page-Collection gibt Zugang zu diesen Funktionen:

**$pages->filter($key, $value, $exactMatch = true)**  
Filtere eine Page-Collection nach Metadaten

**$pages->sort($key, $ascendingOrder = true)**  
Sortiere eine Page-Collection nach Metadaten

**$pages->similar($page, $ascendingOrder = false)**  
Sortiere eine Page-Collection nach Metadatenähnlichkeit

**$pages->merge($input)**  
Vereinige eine Page-Collection

**$pages->append($page)**  
Hänge an das Ende der Page-Collection

**$pages->prepend($page)**  
Stelle an den Anfang der Page-Collection

**$pages->limit($pagesMax)**  
Begrenze die Anzahl der Seiten in der Page-Collection

**$pages->reverse()**  
Drehe die Page-Collection um

**$pages->shuffle()**  
Mach die Page-Collection zufällig

**$pages->pagination($limit, $reverse = true)**  
Erstelle eine Pagination für die Page-Collection

**$pages->getPaginationNumber()**  
Hole die aktuelle Seitennummer in der Pagination

**$pages->getPaginationCount()**  
Hole die höchste Seitennummer in der Pagination

**$pages->getPaginationLocation($pageNumber)**  
Hole die Adresse einer Seite in der Pagination

**$pages->getPaginationPrevious()**  
Hole die Adresse der vorherigen Seite in der Pagination

**$pages->getPaginationNext()**  
Hole die Adresse der nächsten Seite in der Pagination

**$pages->getFilter()**  
Hole den aktuellen Seitenfilter

**$pages->getModified($httpFormat = false)**  
Hole das Änderungsdatum der Page-Collection, Unix-Zeit oder HTTP-Format

**$pages->isPagination()**  
Teste ob eine Pagination vorhanden ist

Hier ist ein Beispiel-Snippet um drei zufällige Seiten anzuzeigen:

``` php
<?php list($name, $pages) = $yellow->getSnippetArgs() ?>
<?php if(!$pages) $pages = $yellow->pages->index() ?>
<ul>
<?php foreach($pages->shuffle()->limit(3) as $page): ?>
<li><?php echo $page->getHtml("title") ?></li>
<?php endforeach ?>
</ul>
```

Hier ist ein Beispiel-Snippet um Entwurfseiten anzuzeigen:

``` php
<?php list($name, $pages) = $yellow->getSnippetArgs() ?>
<?php if(!$pages) $pages = $yellow->pages->index(true, true) ?>
<ul>
<?php foreach($pages->filter("status", "draft") as $page): ?>
<li><?php echo $page->getHtml("title") ?></li>
<?php endforeach ?>
</ul>
```

### Yellow-Pages

Yellow-Pages gibt Zugang zu Seiten vom Dateisystem:

**$yellow->pages->find($location, $absoluteLocation = false)**  
Hole eine [Page](#yellow-page) vom Dateisystem, null falls nicht vorhanden

**$yellow->pages->index($showInvisible = false, $multiLang = false, $levelMax = 0)**  
Hole eine [Page-Collection](#yellow-page-collection) mit allen Seiten

**$yellow->pages->top($showInvisible = false)**  
Hole eine [Page-Collection](#yellow-page-collection) mit Hauptseiten der Navigation

**$yellow->pages->path($location, $absoluteLocation = false)**  
Hole eine [Page-Collection](#yellow-page-collection) mit Pfad in der Navigation

**$yellow->pages->multi($location, $absoluteLocation = false, $showInvisible = false)**  
Hole eine [Page-Collection](#yellow-page-collection) mit mehreren Sprachen

**$yellow->pages->clean()**  
Hole eine [Page-Collection](#yellow-page-collection) die leer ist

Hier ist ein Beispiel-Snippet um alle Seiten anzuzeigen:

``` php
<?php $pages = $yellow->pages->index(true, true) ?>
<?php $yellow->page->setLastModified($pages->getModified()) ?>
<ul>
<?php foreach($pages as $page): ?>
<li><?php echo $page->getHtml("title") ?></li>
<?php endforeach ?>
</ul>
```

Hier ist ein Beispiel-Snippet um Seiten unterhalb einer bestimmten Adresse anzuzeigen:

``` php
<?php $pages = $yellow->pages->find("/help/")->getChildren(true) ?>
<?php $yellow->page->setLastModified($pages->getModified()) ?>
<ul>
<?php foreach($pages as $page): ?>
<li><?php echo $page->getHtml("title") ?></li>
<?php endforeach ?>
</ul>
```

### Yellow-Files

Yellow-Files gibt Zugang zu Dateien vom Dateisystem:

**$yellow->files->find($location, $absoluteLocation = false)**  
Hole eine [Page](#yellow-page) mit Informationen über Mediendatei, null falls nicht vorhanden

**$yellow->files->index($showInvisible = false, $multiPass = false, $levelMax = 0)**  
Hole eine [Page-Collection](#yellow-page-collection) mit allen Mediendateien

**$yellow->files->clean()**  
Hole eine [Page-Collection](#yellow-page-collection) die leer ist

Hier ist ein Beispiel-Snippet um alle Mediendateien anzuzeigen:

``` php
<?php $files = $yellow->files->index(true, true) ?>
<?php $yellow->page->setLastModified($files->getModified()) ?>
<ul>
<?php foreach($files as $file): ?>
<li><?php echo $file->getLocation(true) ?></li>
<?php endforeach ?>
</ul>
```

Hier ist ein Beispiel-Snippet um Mediendateien eines bestimmten Types anzuzeigen:

``` php
<?php $files = $yellow->files->index(true, true)->filter("type", "pdf") ?>
<?php $yellow->page->setLastModified($files->getModified()) ?>
<ul>
<?php foreach($files as $file): ?>
<li><?php echo $file->getLocation(true) ?></li>
<?php endforeach ?>
</ul>
```

### Yellow-Plugins

Yellow-Plugins gibt Zugang zu [Plugins](#yellow-plugins-beispiel):

**$yellow->plugins->get($name)**  
Hole ein Plugin

**$yellow->plugins->getData()**  
Hole die Versionsinformationen von Plugins

**$yellow->plugins->getModified($httpFormat = false)**  
Hole das Änderungsdatum von Plugins, Unix-Zeit oder HTTP-Format

**$yellow->plugins->register($name, $plugin, $version, $priority = 0)**  
Registriere ein Plugin für [Ereignisse](#ereignisse)

**$yellow->plugins->isExisting($name)**  
Teste ob ein Plugin existiert

Hier ist ein Beispiel-Snippet um Informationen über Plugins anzuzeigen:

``` php
<ul>
<?php foreach($yellow->plugins->getData() as $key=>$value): ?>
<li><?php echo htmlspecialchars("$key $value") ?></li>
<?php endforeach ?>
</ul>
```

Hier ist ein Beispiel-Snippet um zu testen ob ein Plugin existiert:

``` php
<?php if($yellow->plugins->isExisting("fontawesome")): ?>
<a href="https://twitter.com/username"><i class="fa fa-twitter"></i></a>
<?php else: ?>
<?php $yellow->page->error(500, "Snippet requires 'fontawesome' plugin!") ?>
<?php endif ?>
```

### Yellow-Themes

Yellow-Themes gibt Zugang zu [Themes](yellow-themes-de#themes):

**$yellow->themes->getData()**  
Hole die Versionsinformationen von Themes

**$yellow->themes->getModified($httpFormat = false)**  
Hole das Änderungsdatum von Themes, Unix-Zeit oder HTTP-Format

**$yellow->themes->isExisting($name)**  
Teste ob ein Theme existiert

Hier ist ein Beispiel-Snippet um Informationen über Themes anzuzeigen:

``` php
<ul>
<?php foreach($yellow->themes->getData() as $key=>$value): ?>
<li><?php echo htmlspecialchars("$key $value") ?></li>
<?php endforeach ?>
</ul>
```

Hier ist ein Beispiel-Snippet um zu testen ob ein Theme existiert:

``` php
<?php if($yellow->themes->isExisting("blogsite")): ?>
<p>Blogsite theme installed.</p>
<?php else: ?>
<?php $yellow->page->error(500, "Snippet requires 'blogsite' theme!") ?>
<?php endif ?>
```

### Yellow-Config

Yellow-Config gibt Zugang zu [Einstellungen ](adjusting-system-de#systemeinstellungen):

**$yellow->config->get($key)**  
Hole eine Einstellung

**$yellow->config->getHtml($key)**  
Hole eine Einstellung, HTML-kodiert

**$yellow->config->getData($filterStart = "", $filterEnd = "")**  
Hole Einstellungen

**$yellow->config->getModified($httpFormat = false)**  
Hole das Änderungsdatum von Einstellungen, Unix-Zeit oder HTTP-Format

**$yellow->config->isExisting($key)**  
Teste ob eine Einstellung existiert

Hier ist ein Beispiel-Snippet um Server-Einstellungen anzuzeigen:

``` php
<div class="yellow config">
<?php foreach($yellow->config->getData("server") as $key=>$value): ?>
<?php echo htmlspecialchars("$key: $value") ?><br />
<?php endforeach ?>
</div>
```

Hier ist ein Beispiel-Snippet um Webmaster-Einstellungen anzuzeigen:

``` php
<div class="yellow config">
<?php $author = $yellow->config->get("author") ?>
<?php $email = $yellow->config->get("email") ?>
<?php echo htmlspecialchars("$author - $email") ?>
</div>
```

### Yellow-Text

Yellow-Text gibt Zugang zu [Textstrings](language-configuration-de#sprachen):

**$yellow->text->get($key)**  
Hole ein Textstring

**$yellow->text->getHtml($key)**  
Hole ein Textstring, HTML-kodiert

**$yellow->text->getText($key, $language )**  
Hole ein Textstring für eine bestimmte Sprache

**$yellow->text->getTextHtml($key, $language )**  
Hole ein Textstring für eine bestimmte Sprache, HTML-kodiert

**$yellow->text->getData($filterStart = "", $language = "")**  
Hole Textstrings

**$yellow->text->getDateFormatted($timestamp, $format)**  
Hole ein menschenlesbares Datum, [maßgeschneidertes Format](http://php.net/manual/de/function.date.php)  

**$yellow->text->getLanguages()**  
Hole Sprachen

**$yellow->text->getModified($httpFormat = false)**  
Hole das Änderungsdatum von Text, Unix-Zeit oder HTTP-Format

**$yellow->text->isLanguage($language)**  
Teste ob eine Sprache existiert

**$yellow->text->isExisting($key, $language = "")**  
Teste ob ein Textstring existiert

Hier ist ein Beispiel-Snippet um Kontakt-Textstrings anzuzeigen:

``` php
<div class="yellow text">
<?php foreach($yellow->text->getData("contact") as $key=>$value): ?>
<?php echo htmlspecialchars("$key: $value") ?><br />
<?php endforeach ?>
</div>
```

Hier ist ein Beispiel-Snippet um Sprachen anzuzeigen:

``` php
<ul>
<?php foreach($yellow->text->getLanguages() as $language): ?>
<li>
<?php echo $yellow->text->getTextHtml("languageDescription", $language) ?> - 
<?php echo $yellow->text->getTextHtml("languageTranslator", $language) ?>
</li>
<?php endforeach ?>
</ul>
```

### Yellow-Toolbox

Yellow-Toolbox gibt Zugang zu einer Werkzeugkiste mit Helfern:

**$yellow->toolbox->getLocation($filterStrict = true)**  
Hole die Adresse der aktuellen HTTP-Anfrage

**$yellow->toolbox->getLocationArgs()**  
Hole die Adressenargumente der aktuellen HTTP-Anfrage

**$yellow->toolbox->isLocationArgs($location = "")**  
Teste ob es Adressenargumente gibt in der Adresse

**$yellow->toolbox->normaliseArgs($text, $appendSlash = true, $filterStrict = true)**  
Normalisiere Adressenargumente

**$yellow->toolbox->readFile($fileName, $sizeMax = 0)**  
Lese eine Datei, leerer String falls nicht vorhanden

**$yellow->toolbox->createFile($fileName, $fileData, $mkdir = false)**  
Erstelle eine Datei

**$yellow->toolbox->copyFile($fileNameSource, $fileNameDest, $mkdir = false)**  
Kopiere eine Datei  

**$yellow->toolbox->renameFile($fileNameSource, $fileNameDest, $mkdir = false)**  
Benenne eine Datei um

**$yellow->toolbox->deleteFile($fileName, $pathTrash = "")**  
Lösche eine Datei

**$yellow->toolbox->deleteDirectory($path, $pathTrash = "")**  
Lösche ein Verzeichnis  

**$yellow->toolbox->modifyFile($fileName, $modified)**  
Setze das Änderungsdatum der Datei, Unix-Zeit

**$yellow->toolbox->getFileModified($fileName)**  
Hole das Änderungsdatum der Datei, Unix-Zeit

**$yellow->toolbox->getFileExtension($fileName)**  
Hole die Dateiendung

**$yellow->toolbox->getTextLines($text)**  
Hole die Zeilen des Textstrings

**$yellow->toolbox->getTextArgs($text, $optional = "-")**  
Hole die Argumente des Textstrings

Hier ist ein Beispiel-Snippet um Textzeilen von Datei zu lesen:

``` php
<div class="yellow file">
<?php $fileName = $yellow->config->get("configDir").$yellow->config->get("robotsFile") ?>
<?php $fileData = $this->yellow->toolbox->readFile($fileName) ?>
<?php foreach($this->yellow->toolbox->getTextLines($fileData) as $line): ?>
<?php echo htmlspecialchars($line) ?><br />
<?php endforeach ?>
</div>
```

## Ereignisse

Die folgenden Ereignisse sind für Plugins verfügbar:

**function onLoad($yellow)**  
Behandle die Initialisierung

**function onUpdate($name)**  
Behandle die Aktualisierung

**function onRequest($serverScheme, $serverName, $base, $location, $fileName)**  
Behandle eine Anfrage

**function onParseMeta($page)**  
Behandle das Parsen von Metadaten einer Seite

**function onParseContentRaw($page, $text)**  
Behandle das Parsen des Seiteninhaltes im Rohformat

**function onParseContentBlock($page, $name, $text, $shortcut)**  
Behandle das Parsen des Seiteninhaltes eines Teilblockes

**function onParseContentText($page, $text)**  
Behandle das Parsen des Seiteninhaltes

**function onParsePage()**  
Behandle das Parsen einer Seite

**function onExtra($name)**  
Behandle das Parsen von extra HTML-Daten einer Seite

**function onUserAccount($email, $password, $action, $users)**  
Behandle Benutzerkontoänderungen

**function onUserRestrictions($email, $location, $fileName, $users)**  
Behandle Benutzerbeschränkungen um eine Seite zu ändern

**function onCommand($args)**  
Behandle Befehle

**function onCommandHelp()**  
Behandle Hilfe für Befehle

Hier ist ein Beispiel-Plugin, ein ganz einfaches: 

``` php {#yellow-plugins-beispiel}
<?php
class YellowExample
{
	const VERSION = "0.1.1";
	var $yellow;
	
	// Handle initialisation
	function onLoad($yellow)
	{
		$this->yellow = $yellow;
	}
}

$yellow->plugins->register("example", "YellowExample", YellowExample::VERSION);
?>
```

Hier ist ein Beispiel-Plugin um die Abkürzung `[example]` einzubinden:

``` php
<?php
class YellowExample
{
	const VERSION = "0.1.2";
	var $yellow;
	
	// Handle initialisation
	function onLoad($yellow)
	{
		$this->yellow = $yellow;
	}

	// Handle page content parsing of custom block
	function onParseContentBlock($page, $name, $text, $shortcut)
	{
		$output = null;
		if($name=="example" && $shortcut)
		{
			$output = "<div class=\"".htmlspecialchars($name)."\">";
			$output .= "Add more HTML code here";
			$output .= "</div>";
		}
		return $output;
	}
}

$yellow->plugins->register("example", "YellowExample", YellowExample::VERSION);
?>
```

Hier ist ein Beispiel-Plugin um die Dateien `example.css` und `example.js` einzubinden:

``` php
<?php
class YellowExample
{
	const VERSION = "0.1.3";
	var $yellow;
	
	// Handle initialisation
	function onLoad($yellow)
	{
		$this->yellow = $yellow;
	}

	// Handle page extra HTML data
	function onExtra($name)
	{
		$output = null;
		if($name=="header")
		{
			$pluginLocation = $this->yellow->config->get("serverBase").
			$pluginLocation .= $this->yellow->config->get("pluginLocation");
			$output = "<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"{$pluginLocation}example.css\" />\n";
			$output .= "<script type=\"text/javascript\" src=\"{$pluginLocation}example.js\"></script>\n";
		}
		return $output;
	}
}

$yellow->plugins->register("example", "YellowExample", YellowExample::VERSION);
?>

```

## Formate

Die folgenden Datumsformate sind vorhanden:

`YYYY-MM-DD` = Datum beginnend mit dem Jahr, z.B. `2013-04-07`  
`YYYY-MM-DD HH:MM:SS` = Datum und Uhrzeit z.B. `2013-04-07 11:30:00`  

Wird ein Datum auf einer Seite angezeigt wird es in das sprachspezifisches Format konvertiert: 

`dateFormatShort` = kurzes Datum, z.B. `April 2013`  
`dateFormatMedium` = mittleres Datum, z.B. `07.04.2013`   
`dateFormatLong` = langes Datum, z.B. `07.04.2013 11:30`   

Wird Text auf einer Seite ausgegeben kann man diese Kodierungs-Funktionen benutzen:

`htmlspecialchars($string)` = kodiere Textstring ins HTML-Format  
`rawurlencode($string)` = kodiere URL, z.B. Hyperlink-Argumente  
`strencode($string)` = kodiere String, z.B. JavaScript-Argumente  

## Fehlersuche

Öffne `system/plugins/core.php`, ändere die erste Zeile zu `<?php define("DEBUG", 1);`  

```
YellowCore::sendPage Content-Type: text/html; charset=UTF-8
YellowCore::sendPage Page-Modified: Fri, 30 Jan 2015 09:30:12 GMT
YellowCore::sendPage Last-Modified: Mon, 02 Feb 2015 13:19:03 GMT
YellowCore::sendPage theme:flatsite template:blogpages parser:markdown
YellowCore::processRequest file:content/2-plugins/1-blog-plugin/page.txt
YellowCore::request status:200 location:/plugins/blog-plugin/ handler:core
YellowCore::request time:19 ms
```

Dateisysteminformationen durch Erhöhen des Debuglevels zu `<?php define("DEBUG", 2);`
```
YellowConfig::load file:system/config/config.ini
YellowText::load file:system/plugins/language-de.txt
YellowText::load file:system/plugins/language-en.txt
YellowText::load file:system/plugins/language-fr.txt
YellowUsers::load file:system/config/user.ini
YellowLookup::findFileFromLocation /plugins/blog-plugin/ -> content/2-plugins/1-blog-plugin/page.txt
YellowPages::scanLocation location:/plugins/blog-plugin/
```

Maximum Informationen durch Erhöhen des Debuglevels zu `<?php define("DEBUG", 3);`
```
Yellow 0.6.5, PHP 5.5.36, Apache/2.4.18 Darwin
YellowConfig::load file:system/config/config.ini
YellowConfig::load Sitename:Yellow developers
YellowConfig::load Author:Yellow
YellowConfig::load Email:webmaster
YellowConfig::load Language:en
YellowConfig::load Theme:flatsite
```

Wir machen [automatische Builds und Codeanalyse](status), schau dir die [Yellow-Tests](/tests/) an.

## Tipps und Tricks

Einige Tipps für Entwickler:

1. [Installiere das Entwickler-Kit](https://github.com/datenstrom/yellow-developers). Das Entwickler-Kit bietet Plugins, Themes, Beispiele und Dokumentation. Du kannst ausprobieren wie man kleine Webseite, Blogs und Wikis macht. Es ist eine grossartige Art sich mit der Yellow-API vertraut zu machen. 

2. [Lege deinen Code auf GitHub](https://github.com/datenstrom/yellow/issues?q=label%3Anews%20). Erstelle ein Repository für jedes neue Plugin/Theme. Der Name deines Repository sollte `yellow-plugin-xyz` or `yellow-theme-xyz` sein. Wenn dein Code stabil wird, kannst du ihn zum zentralen Yellow-Repository hinzufügen.

3. [Zeige was du gemacht hast](https://twitter.com/search?q=%23madewithyellow). Wir hoffen dass Yellow nützlich für dich ist. Wir hoffen dass du es benutzt um viele Webseiten zu erstellen. Hast du Fragen? Funktioniert etwas nicht wie erwartet? Suchst du Kontakt mit anderen Entwicklern? [Frage uns](support-de).
