---
Title: Yellow-Themes
Sidebar: sidebar-de
Language: de
---
Du kannst das Aussehen deiner Webseite anpassen. [Demo anschauen](/themes/).

## Themes

Themes bestimmen das Aussehen deiner Webseite. Das Standardtheme wird in der Datei `system/config/config.ini` festgelegt. Eine anderes Theme lässt sich in den [Einstellungen](markdown-cheat-sheet-de#einstellungen) ganz oben auf jeder Seite festlegen, zum Beispiel `Theme: flatsite`. 

Jede Webseite hat ein kleines Icon das zu ihr gehört, auch Favicon genannt. Der Webbrowser zeigt dieses Icon beispielsweise in der Adresszeile, in Lesezeichen oder auf der Arbeitsfläche an. Um das Standardicon zu ändern überschreibe die Datei `system/themes/assets/icon.png`.

## CSS

Um ein Theme anzupassen, kann man [CSS](http://www.w3schools.com/css/) benutzen. Damit kannst du Farben, Schriftart und das Aussehen deiner Webseite ändern. Du kannst entweder die vorhandene CSS-Datei ändern oder eine neues Theme anlegen, zum Beispiel `Theme: custom`.

Hier ist eine Beispiel-CSS-Datei `system/themes/assets/custom.css`:

``` css
html, body, div, form, pre, span, tr, th, td, img { margin:0; padding:0; border:0; vertical-align:baseline; }
body { background-color:#fff; color:#717171; margin:1em; }
h1, h2, h3, h4, h5, h6 { color:#07d; font-weight:normal; }
a { color:#07d; text-decoration:none; }
a:hover { color:#07d; text-decoration:underline; }
.header .sitename a { color:#000; text-decoration:none; }
.navigation a { color:#07d; padding-right:0.3em; }
.navigation ul { padding:0; list-style:none; }
.navigation li { display:inline; }
```

Hier ist die selbe CSS-Datei mit dunkler Hintergrundfarbe:

``` css
html, body, div, form, pre, span, tr, th, td, img { margin:0; padding:0; border:0; vertical-align:baseline; }
body { background-color:#000; color:#ddd; margin:1em; }
h1, h2, h3, h4, h5, h6 { color:#fff; font-weight:normal; }
a { color:#29f; text-decoration:none; }
a:hover { color:#29f; text-decoration:underline; }
.header .sitename a { color:#fff; text-decoration:none; }
.navigation a { color:#29f; padding-right:0.3em; }
.navigation ul { padding:0; list-style:none; }
.navigation li { display:inline; }
```

## JavaScript

Um ein Theme zu erweitern, kann man [JavaScript](http://www.w3schools.com/js/) benutzen. Damit kannst du Webseiten mit dynamischen Funktionen erstellen. Du kannst JavaScript in eine Datei speichern die einen ähnlichen Namen hat wie die CSS-Datei. Es wird dann automatisch eingebunden.

Hier ist eine Beispiel-JS-Datei `system/themes/assets/custom.js`:

``` javascript
var ready = function() 
{
	console.log("Hello world");
	// Add more JavaScript code here
}
if(window.addEventListener) {
	window.addEventListener("load", ready, false);
} else {
	window.attachEvent("onload", ready);
}
```

## HTML

Um eigene Themes zu erstellen, ist es gut die [HTML](http://www.w3schools.com/html/)-Struktur einer Seite zu kennen. Yellow kommt mit einer Standard-HTML-Struktur die auf den meisten Webseiten, Blogs und Wiki benutzt wird. Das ist nur ein Vorschlag, du kannst jede Struktur verwenden die du willst.

Hier ist die Standard-HTML-Struktur:

``` php
<!DOCTYPE html>
<html>
  <head>…</head>
  <body>
    <div class="page template-default">
      <div class="header">…</div>
      <div class="content">…</div>
      <div class="footer">…</div>
    </div>
  </body>
</html>
```

Das erste `<div>`-Element hat nützliche Klassen-Information, zum Beispiel `template-default`. Eine Blog-Seite benutzt `template-blog`, eine Wiki-Seite `template-wiki` und eine Sidebar `with-sidebar`. Damit kannst du Themes an unterschiedliche Templates anpassen.

[Weiter: Yellow-Templates →](yellow-templates-de)
