---
Title: Yellow API
Sidebar: sidebar
Language: en
Information: Please do not translate this file, English only
---
Yellow has an API for developers. We :heart: developers.

[toc]

##Â Objects

The following objects are available:

[$yellow->page](#yellow-page) gives access to current page  
[$yellow->pages](#yellow-pages) gives access to pages from file system  
[$yellow->files](#yellow-files) gives access to files from file system  
[$yellow->plugins](#yellow-plugins) gives access to plugins  
[$yellow->themes](#yellow-themes) gives access to themes  
[$yellow->config](#yellow-config) gives access to configuration  
[$yellow->text](#yellow-text) gives access to text strings  
[$yellow->toolbox](#yellow-toolbox) gives access to toolbox with helpers  

### Yellow page

Yellow page gives access to current page:

**$yellow->page->get($key)**  
Return page meta data, [see notes about meta data](#notes) 

**$yellow->page->getHtml($key)**  
Return page meta data, HTML encoded  

**$yellow->page->getDate($key, $dateFormat = "")**  
Return page meta data as [language specific date](#formats)  

**$yellow->page->getContent($rawFormat = false)**  
Return page content, HTML encoded or raw format

**$yellow->page->getParent()**  
Return parent page relative to current page, NULL if none

**$yellow->page->getParentTop($homeFailback = true)**  
Return top-level page for current page, NULL if none

**$yellow->page->getSiblings($showInvisible = false)**  
Return [page collection](#yellow-page-collection) with pages on the same level as current page

**$yellow->page->getChildren($showInvisible = false)**  
Return [page collection](#yellow-page-collection) with child pages relative to current page

**$yellow->page->getFiles($showInvisible = false)**  
Return [page collection](#yellow-page-collection) with media files for current page

**$yellow->page->getPages()**  
Return [page collection](#yellow-page-collection) with additional pages for current page

**$yellow->page->getPage($key)**  
Return related page

**$yellow->page->getLocation()**  
Return absolute page location, [see notes about locations](#notes)

**$yellow->page->getUrl()**  
Return page URL with server scheme and server name

**$yellow->page->getExtra($name)**  
Return page extra HTML data

**$yellow->page->getHeader($key)**  
Return page response header

**$yellow->page->getModified($httpFormat = false)**  
Return page content modification date, Unix time or HTTP format

**$yellow->page->getLastModified($httpFormat = false)**  
Return last modification date, Unix time or HTTP format

**$yellow->page->getStatusCode($httpFormat = false)**  
Return page status code, number or HTTP format

**$yellow->page->error($statusCode, $pageError = "")**  
Respond with error page

**$yellow->page->clean($statusCode, location = "")**  
Respond with status code, no page content

**$yellow->page->isAvailable()**  
Check if page is available

**$yellow->page->isVisible()**  
Check if page is visible

**$yellow->page->isActive()**  
Check if page is within current request

**$yellow->page->isCacheable()**  
Check if page is cacheable

**$yellow->page->isError()**  
Check if page with error

**$yellow->page->isHeader($key)**  
Check if response header exists

**$yellow->page->isExisting($key)**  
Check if page meta data exists  

**$yellow->page->isPage($key)**  
Check if related page exists  

### Yellow page collection

Yellow page collection gives access to these functions:

**$pages->filter($key, $value, $exactMatch = true)**  
Filter page collection by meta data  

**$pages->sort($key, $ascendingOrder = true)**  
Sort page collection by meta data  

**$pages->similar($page, $ascendingOrder = false)**  
Sort page collection by meta data similarity

**$pages->merge($input)**  
Merge page collection

**$pages->append($page)**  
Append to end of page collection

**$pages->prepend($page)**  
Prepend to start of page collection

**$pages->limit($pagesMax)**  
Limit the number of pages in page collection

**$pages->reverse()**  
Reverse page collection

**$pages->shuffle()**  
Randomize page collection

**$pages->pagination($limit, $reverse = true)**  
Paginate page collection

**$pages->getPaginationNumber()**  
Return current page number in pagination

**$pages->getPaginationCount()**  
Return highest page number in pagination

**$pages->getPaginationLocation($pageNumber)**  
Return absolute location for a page in pagination

**$pages->getPaginationPrevious()**  
Return absolute location for previous page in pagination

**$pages->getPaginationNext()**  
Return absolute location for next page in pagination

**$pages->getFilter()**  
Return current page filter

**$pages->getModified($httpFormat = false)**  
Return page collection modification date, Unix time or HTTP format

**$pages->isPagination()**  
Check if there is a pagination

### Yellow pages

Yellow pages gives access to pages from file system:

**$yellow->pages->find($location, $absoluteLocation = false)**  
Return [page](#yellow-page) from file system, NULL if not found

**$yellow->pages->index($showInvisible = false, $multiLang = false, $levelMax = 0)**  
Return [page collection](#yellow-page-collection) with all pages

**$yellow->pages->top($showInvisible = false)**  
Return [page collection](#yellow-page-collection) with top-level navigation

**$yellow->pages->path($location, $absoluteLocation = false)**  
Return [page collection](#yellow-page-collection) with path ancestry

**$yellow->pages->multi($location, $absoluteLocation = false, $showInvisible = false)**  
Return [page collection](#yellow-page-collection) with multiple languages

**$yellow->pages->clean()**  
Return [page collection](#yellow-page-collection) that is empty

### Yellow files

Yellow files gives access to files from file system:

**$yellow->files->find($location, $absoluteLocation = false)**  
Return [page](#yellow-page) with media file information, NULL if not found

**$yellow->files->index($showInvisible = false, $multiPass = false, $levelMax = 0)**  
Return [page collection](#yellow-page-collection) with all media files

**$yellow->files->clean()**  
Return [page collection](#yellow-page-collection) that is empty

### Yellow plugins

Yellow plugins gives access to plugins:

**$yellow->plugins->get($name)**  
Return plugin

**$yellow->plugins->getData()**  
Return plugin version

**$yellow->plugins->getModified($httpFormat = false)**  
Return plugin modification date, Unix time or HTTP format

**$yellow->plugins->register($name, $class, $version)**  
Register plugin to [events](#events)

**$yellow->plugins->isExisting($name)**  
Check if plugin exists

### Yellow themes

Yellow themes gives access to themes:

**$yellow->themes->getData()**  
Return theme version

**$yellow->themes->getModified($httpFormat = false)**  
Return theme modification date, Unix time or HTTP format

**$yellow->themes->isExisting($name)**  
Check if theme exists

### Yellow config

Yellow config gives access to configuration:

**$yellow->config->get($key)**  
Return configuration, [see notes about configuration](#notes)

**$yellow->config->getHtml($key)**  
Return configuration, HTML encoded

**$yellow->config->getData($filterStart = "", $filterEnd = "")**  
Return configuration strings

**$yellow->config->getModified($httpFormat = false)**  
Return configuration modification date, Unix time or HTTP format

**$yellow->config->isExisting($key)**  
Check if configuration exists

### Yellow text

Yellow text gives access to text strings:

**$yellow->text->get($key)**  
Return text string, [see notes about text strings](#notes)

**$yellow->text->getHtml($key)**  
Return text string, HTML encoded

**$yellow->text->getData($filterStart = "", $language = "")**  
Return text strings

**$yellow->text->getDateFormatted($timestamp, $format)**  
Return text string with human readable date, [custom date](http://php.net/manual/en/function.date.php) format  

**$yellow->text->getLanguages()**  
Return languages

**$yellow->text->getModified($httpFormat = false)**  
Return text modification date, Unix time or HTTP format

**$yellow->text->isLanguage($language)**  
Check if language exists

**$yellow->text->isExisting($key, $language = "")**  
Check if text string exists

### Yellow toolbox

Yellow toolbox gives access to toolbox with helpers:

**$yellow->toolbox->getLocation($filterStrict = true)**  
Return location from current HTTP request

**$yellow->toolbox->getLocationArgs()**  
Return location arguments from current HTTP request

**$yellow->toolbox->isLocationArgs($location = "")**  
Check if location contains location arguments

**$yellow->toolbox->normaliseArgs($text, $appendSlash = true, $filterStrict = true)**  
Normalise location arguments

**$yellow->toolbox->detectBrowserLanguage($languages, $languageDefault)**  
Detect web browser language

**$yellow->toolbox->detectImageInfo($fileName)**  
Detect image dimensions and type, png or jpg

## Events

The following plugin events are available:

**function onLoad($yellow)**  
Handle initialisation

**function onRequest($serverScheme, $serverName, $base, $location, $fileName)**  
Handle request

**function onParseMeta($page)**  
Handle page meta data parsing

**function onParseContentRaw($page, $text)**  
Handle page content parsing of raw format

**function onParseContentBlock($page, $name, $text, $shortcut)**  
Handle page content parsing of custom block

**function onParseContentText($page, $text)**  
Handle page content parsing

**function onParsePage()**  
Handle page parsing

**function onExtra($name)**  
Handle page extra HTML data

**function onUserPermission($location, $fileName, $users)**  
Handle permission to change page

**function onCommand($args)**  
Handle [command](https://github.com/datenstrom/yellow-plugins/tree/master/commandline)

**function onCommandHelp()**  
Handle [command help](https://github.com/datenstrom/yellow-plugins/tree/master/commandline)

## Debugging

Open the file `system/plugins/core.php`, change first line to `<?php define("DEBUG", 1);`  

```
YellowCore::sendPage Content-Type: text/html; charset=UTF-8
YellowCore::sendPage Content-Modified: Fri, 30 Jan 2015 09:30:12 GMT
YellowCore::sendPage Last-Modified: Mon, 02 Feb 2015 13:19:03 GMT
YellowCore::sendPage theme:flatsite template:blogpages parser:markdown
YellowCore::processRequest file:content/2-plugins/1-blog-plugin/page.txt handler:core
YellowCore::request status:200 location:/plugins/blog-plugin/
YellowCore::request time:19 ms
```

Get file system information by increasing debug level to `<?php define("DEBUG", 2);`
```
YellowConfig::load file:system/config/config.ini
YellowText::load file:system/plugins/language-de.txt
YellowText::load file:system/plugins/language-en.txt
YellowText::load file:system/plugins/language-fr.txt
YellowUsers::load file:system/config/user.ini
YellowLookup::findFileFromLocation /plugins/blog-plugin/ -> content/2-plugins/1-blog-plugin/page.txt
YellowPages::scanLocation location:/plugins/blog-plugin/
YellowLookup::findLocationFromFile /plugins/blog-plugin/blog-example <- content/2-plugins/1-blog-plugin/2013-04-07-blog-example.txt
YellowLookup::findLocationFromFile /plugins/blog-plugin/blog-example-2 <- content/2-plugins/1-blog-plugin/2013-04-22-blog-example-2.txt
YellowLookup::findLocationFromFile /plugins/blog-plugin/blog-example-3 <- content/2-plugins/1-blog-plugin/2013-05-01-blog-example-3.txt
```

Get maximum information by increasing debug level to `<?php define("DEBUG", 3);`
```
Yellow 0.6.3, PHP 5.5.30, Apache/2.4.16 Darwin
YellowConfig::load file:system/config/config.ini
YellowConfig::load sitename:Yellow developers
YellowConfig::load author:Yellow
YellowConfig::load language:en
...
```

## Formats

The following date formats are available: 

`YYYY-MM-DD` = date starting with the year, e.g. `2013-04-07`  
`YYYY-MM-DD HH:MM:SS` = date and time, e.g. `2013-04-07 11:30:00`  

When dates are displayed on a page they are converted to a language specific date:

`dateFormatShort` = short date, e.g. `April 2013`  
`dateFormatMedium` = medium date, e.g. `2013-04-07` or `07.04.2013`  
`dateFormatLong` = long date, e.g. `2013-04-07 11:30`   

## Notes

Some tips for Yellow developers: 

1. Download the developers kit. The developers kit includes plugins, themes and help. You can try out how to make small web pages, blogs and wikis. It's a great place to test your code and see some examples of the Yellow API. [Read more](https://github.com/datenstrom/yellow-developers).

2. Put your code on GitHub. Create a new repository for each new plugin/theme, the name of your repository should be `yellow-plugin-something` or `yellow-theme-something`. We're looking forward to see what you create. [Read more](https://github.com/datenstrom/yellow-plugins/blob/master/README.md).

3. Meta data, configuration and text strings are stored starting with a upper case character, for example `Title`. The internal data starts with a lower case character. Which means your code has to use a lowercase name, for example `title`. This is known to cause confusion and feedback is very welcome. [Read more](https://github.com/datenstrom/yellow/issues/126).

4. Yellow works with relative locations, this means relative to your `ServerBase`. In your own code you can use `$yellow->page->location` to access the relative page location and `$yellow->page->getLocation()` to access the absolute page location. This is known to not be a good solution and will be changed. [Read more](https://github.com/datenstrom/yellow/issues/127).

5. Additional HTML data can be inserted via function `onExtra()`, for example to add HTML headers. At the moment this works only for the current page `$yellow->page`. What's missing is a mechanism to insert HTML data to pages in a loop, for example in content snippets. This is something to be improved.

6. Something missing or not working as expected? [Contact us](support).
